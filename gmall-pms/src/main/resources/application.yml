server:
  port: 18081 # \u670D\u52A1\u7AEF\u53E3\u53F7
spring:
  cloud:
    nacos:
      discovery: # \u6CE8\u518C\u4E2D\u5FC3\u914D\u7F6E
        server-addr: 192.168.0.101:8848 # nacos \u6CE8\u518C\u4E2D\u5FC3\u5730\u5740
    sentinel: # \u9650\u6D41\u914D\u7F6E
      transport:
        dashboard: 192.168.0.101:8080 # sentinel \u5BA2\u6237\u7AEF\u5730\u5740
        port: 8719 # \u670D\u52A1\u4E0E dashboard \u8FDB\u884C\u4EA4\u4E92\u7684\u7AEF\u53E3
    alibaba:
      seata:
        tx-service-group: gmall_tx_group
  zipkin: # \u94FE\u8DEF\u8FFD\u8E2A\u914D\u7F6E
    base-url: http://192.168.0.101:9411 # zipkin \u5730\u5740
    discovery-client-enabled: false # \u662F\u5426\u76D1\u63A7 zipkin \u672C\u8EAB\u7684\u8BF7\u6C42
    sender:
      type: web # \u94FE\u8DEF\u6570\u636E\u4EE5\u4EC0\u4E48\u65B9\u5F0F\u8FD4\u9001\u7ED9 zipkin. web \u4F7F\u7528 http \u7684\u5F62\u5F0F\u53D1\u9001
  sleuth: # \u91C7\u96C6\u7387\u914D\u7F6E
    sampler:
      probability: 1 # \u91C7\u96C6\u7387, \u9ED8\u8BA4\u662F \u767E\u5206\u4E4B10 \u751F\u4EA7\u65F6\u4F7F\u7528, \u5F00\u53D1\u5E94\u8BE5\u8BBE\u7F6E\u4E3A 1 \u91C7\u96C6\u5168\u90E8\u8BF7\u6C42
  datasource: # MySQL
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://192.168.0.101:3306/guli_pms?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai # \u8FDE\u63A5\u534F\u8BAE
    username: root
    password: root
  redis: # Redis
    host: 192.168.0.101
    port: 6379
  rabbitmq:
    host: 192.168.0.101
    port: 5672
    virtual-host: /admin
    username: admin
    password: admin
    # 生产者确认类型
    #   none - 不确认模式
    #   simple - 同步阻塞方式确认, 性能不高(等到死为止, 并发不过百可以使用. 可靠性较高)
    #   correlated - 异步非阻塞方式确认, 性能较高
    publisher-confirm-type: correlated
    # 确认消息是否到达队列
    publisher-returns: true
    listener:
      # 消费者类型. direct 不能多线程消费
      type: simple # simple 另开线程获取消息、direct 直接使用消费者主线程获取消息
      simple:
        # 设置能者多劳(公平分发): rabbitmq 默认是采用轮训的方式分配消息当有多个消费者接入时，消息的分配模式是一个消费者分配一条，直至消息消费完成.
        prefetch: 1 # 消费完一条消息后才回去 队列获取下一条消息
        concurrency: 8 # 数值取决于 cpu 核数. 此时一个连接会有 8 个信道. 充分发挥每个cpu的性能
        # ack 即是确认字符，在数据通信中，接收站发给发送站的一种传输类控制字符。表示发来的数据已确认接收无误
        # 生产者 -> mq -> 消费者. 站在的角度不同 接收站与消费站也不同
        # 消费者确认模式:
        #   nome - 不确认模式, 只要消费者获取了消息, 消息即被确认. 如果程序发生异常等 消息即被丢失
        #   auto - 自动确认, 只要消费者在消费过程中没有异常即被确认, 如果出现异常会无限重试(如果有几条消息发生异常无限重试会耗费大量服务器资源)
        #   manual 手动确认模式, 在消费者最后手动确认 可以 保证消息的安全性
        #
        #     channel.basicack 确认 / basicnack() 不确认 / basicreject() 拒绝消息
        acknowledge-mode: manual
feign: # feign
  sentinel:
    enabled: true # \u5F00\u542F feign \u7684 sentinel \u529F\u80FD
mybatis-plus: # mybatis-plus \u914D\u7F6E
  mapper-locations: classpath:mapper/pms/**/*.xml # \u6620\u5C04\u6587\u4EF6\u5730\u5740 classpath \u5C31\u662F resources
  type-aliases-package: com.atguigu.gmall.pms.entity # \u522B\u540D\u5305\u626B\u63CF
  global-config:
    db-config:
      id-type: auto # id \u7B56\u7565, \u751F\u4EA7\u5E94\u8BE5\u4F7F\u7528\u5206\u5E03\u5F0F id. auto \u6570\u636E\u5E93\u81EA\u589E
logging: # \u67E5\u770B\u6267\u884C SQL
  level: # \u7EA7\u522B
    com.atguigu.gmall.pms: debug # debug \u6A21\u5F0F